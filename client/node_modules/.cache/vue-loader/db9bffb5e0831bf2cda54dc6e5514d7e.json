{"remainingRequest":"C:\\Users\\Laggy pc\\Documents\\GitHub\\SoftwareEngineeringB11\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Laggy pc\\Documents\\GitHub\\SoftwareEngineeringB11\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Laggy pc\\Documents\\GitHub\\SoftwareEngineeringB11\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Laggy pc\\Documents\\GitHub\\SoftwareEngineeringB11\\client\\src\\components\\register.vue?vue&type=template&id=8f8a1d9a&scoped=true&","dependencies":[{"path":"C:\\Users\\Laggy pc\\Documents\\GitHub\\SoftwareEngineeringB11\\client\\src\\components\\register.vue","mtime":1639669317574},{"path":"C:\\Users\\Laggy pc\\Documents\\GitHub\\SoftwareEngineeringB11\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Laggy pc\\Documents\\GitHub\\SoftwareEngineeringB11\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Laggy pc\\Documents\\GitHub\\SoftwareEngineeringB11\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Laggy pc\\Documents\\GitHub\\SoftwareEngineeringB11\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}