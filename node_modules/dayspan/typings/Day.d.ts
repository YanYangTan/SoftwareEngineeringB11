import { Unit } from './DayFunctions';
import { IdentifierInput } from './Identifier';
import { Locale } from './Locale';
import { Op } from './Operation';
import { Time } from './Time';
/**
 * All valid types which may be converted to a [[Day]] instance.
 *
 * - `number`: A UNIX timestamp.
 * - `string`: A string representation of a date.
 * - `Day`: An existing [[Day]] instance.
 * - `number[]`: An array of numbers specifying any of: [year, month, dayOfMonth, hour, minute, second, millisecond].
 * - `object`: An object with any of the following properties: year, month, dayOfMonth, hour, minute, second, millisecond.
 * - `true`: This will be interpreted as [[Day.today]]
 */
export declare type DayInput = number | string | Day | number[] | object | true;
/**
 * One of the properties on the [[Day]] object.
 */
export declare type DayProperty = keyof DayFrequency;
/**
 * The properties and their types that can be used in a schedule to define
 * repeatable events.
 */
export interface DayFrequency {
    time: number;
    millis: number;
    seconds: number;
    minute: number;
    hour: number;
    month: number;
    year: number;
    day: number;
    dayOfMonth: number;
    quarter: number;
    dayOfYear: number;
    dayOfWeek: number;
    lastDayOfMonth: number;
    week: number;
    weekOfYear: number;
    weekspanOfYear: number;
    fullWeekOfYear: number;
    lastFullWeekOfYear: number;
    lastWeekspanOfYear: number;
    weekOfMonth: number;
    weekspanOfMonth: number;
    fullWeekOfMonth: number;
    lastFullWeekOfMonth: number;
    lastWeekspanOfMonth: number;
}
/**
 * A class which represents a Date with a few added features.
 *
 * - Has extra properties around days and weeks of the year and weeks of the
 *    year and month.
 * - Inherits global locale and responds to changes.
 * - Can have a custom locale for any given instance.
 * - Comparison functions between days.
 * - Difference calculations between days.
 * - Start of unit calculations.
 * - End of unit calculations.
 * - Add and subtract unit calculations.
 * - Date formatting.
 */
export declare class Day implements DayFrequency {
    /**
     * The date that initialize the day. This should not be modified, and if it
     * is it will result in unpredictable and incorrect behavior.
     */
    readonly date: Date;
    /**
     * The time since the unix epoch in milliseconds in UTC.
     */
    readonly time: number;
    /**
     * The milliseconds of this timestamp (0 to 999).
     */
    readonly millis: number;
    /**
     * The seconds of this timestamp (0 to 59).
     */
    readonly seconds: number;
    /**
     * The minutes of this timestamp (0 to 59).
     */
    readonly minute: number;
    /**
     * The hour of this timestamp (0 to 23).
     */
    readonly hour: number;
    /**
     * The month of this timestamp, zero based (January).
     */
    readonly month: number;
    /**
     * The year of this timestamp.
     */
    readonly year: number;
    /**
     * The day of the week, starting at 0 for Sunday.
     */
    readonly day: number;
    /**
     * The day of the month, starting at 1 for the 1st.
     */
    readonly dayOfMonth: number;
    /**
     * The reference to the global locale or the locale specified on this
     * instance. Use [[Day.getLocale]] to get the proper locale for a Day.
     */
    private _locale;
    /**
     * Creates a new Day instance based on the given date.
     */
    constructor(date: Date);
    /**
     * The quarter of the year this day is in, starting at 0 for January
     * through March.
     */
    readonly quarter: number;
    _quarter: number;
    /**
     * The day of the year, starting at 1 for the 1st of January.
     */
    readonly dayOfYear: number;
    _dayOfYear: number;
    /**
     * The day of the week relative to the first day of the week specified by
     * [[Locale.weekStartsOn]]. So if the week starts on Monday, then this will
     * be 0 for Monday, 1 for Tuesday, etc.
     *
     * This is dependent on the locale of the instance (or global locale).
     */
    readonly dayOfWeek: number;
    _dayOfWeek: number;
    /**
     * The last day of the month, starting at 1 for the last day, 2 for the 2nd
     * to last, etc.
     */
    readonly lastDayOfMonth: number;
    _lastDayOfMonth: number;
    /**
     * The week of the year. The first week of the year (1) contains Jan 1st.
     *
     * This is dependent on the locale of the instance (or global locale).
     */
    readonly week: number;
    _week: number;
    /**
     * The week of the year. The first week of the year (1) is the first week
     * which has the date [[Locale.firstWeekContainsDate]]. If there is a week
     * before that it will be 0. Frequently referred to as the ISO week.
     *
     * This is dependent on the locale of the instance (or global locale).
     */
    readonly weekOfYear: number;
    _weekOfYear: number;
    /**
     * The weekspan of the year, starting at 0 representing January 1st to the 7th.
     * Weekspans allow you to create schedules for things like "the first
     * saturday of the year".
     */
    readonly weekspanOfYear: number;
    _weekspanOfYear: number;
    /**
     * The full week of the year, starting at 0 for a partial week (if one exists)
     * and 1 for the first full week.
     *
     * This is dependent on the locale of the instance (or global locale).
     */
    readonly fullWeekOfYear: number;
    _fullWeekOfYear: number;
    /**
     * The last weekspan of the year, starting at 0 representing December 31st to
     * December 25th. Weekspans allow you to create schedules for things like
     * "the last saturday of the year".
     */
    readonly lastWeekspanOfYear: number;
    _lastWeekspanOfYear: number;
    /**
     * The last full week of the year, starting at 0 for the last week ending
     * before Thursday and 1 for the last week with a Thursday.
     *
     * This is dependent on the locale of the instance (or global locale).
     */
    readonly lastFullWeekOfYear: number;
    _lastFullWeekOfYear: number;
    /**
     * The week of the month. The first week of the month (1) is the first week
     * which has the date [[Locale.firstWeekContainsDate]]. If there is a week
     * before that it will be 0.
     *
     * This is dependent on the locale of the instance (or global locale).
     */
    readonly weekOfMonth: number;
    _weekOfMonth: number;
    /**
     * The weekspan of the month, starting at 0 representing the 1st to the 7th.
     * Weekspans allow you to create schedules for things like "the first
     * saturday of the month".
     */
    readonly weekspanOfMonth: number;
    _weekspanOfMonth: number;
    /**
     * The full week of the month, starting at 0 for a partial week (if one exists)
     * and 1 for the first full week.
     *
     * This is dependent on the locale of the instance (or global locale).
     */
    readonly fullWeekOfMonth: number;
    _fullWeekOfMonth: number;
    /**
     * The last weekspan of the month, starting at 0 representing 31st to 25th
     * for a month with 31 days. Weekspans allow you to create schedules for
     * things like "the last saturday of the month".
     */
    readonly lastWeekspanOfMonth: number;
    _lastWeekspanOfMonth: number;
    /**
     * The last full week of the month, starting at 0 for the last week ending
     * before Thursday and 1 for the last week with a Thursday.
     *
     * This is dependent on the locale of the instance (or global locale).
     */
    readonly lastFullWeekOfMonth: number;
    _lastFullWeekOfMonth: number;
    /**
     * The identifier which stores in a simple form the date and time of this Day.
     */
    readonly timeIdentifier: IdentifierInput;
    _timeIdentifier: IdentifierInput;
    /**
     * The identifier which stores in a simple form the date of this Day.
     */
    readonly dayIdentifier: IdentifierInput;
    _dayIdentifier: IdentifierInput;
    /**
     * The identifier which stores in a simple form the week of the year of this Day.
     */
    readonly weekIdentifier: IdentifierInput;
    _weekIdentifier: IdentifierInput;
    /**
     * The identifier which stores in a simple form the month and year of this Day.
     */
    readonly monthIdentifier: IdentifierInput;
    _monthIdentifier: IdentifierInput;
    /**
     * The identifier which stores in a simple form the quarter and year of this Day.
     */
    readonly quarterIdentifier: IdentifierInput;
    _quarterIdentifier: IdentifierInput;
    /**
     * Returns the locale based value. First it checks to see if the global
     * locale changed and updates accordingly. If the value is not cached the
     * value is recalculated.
     *
     * @param property The property on the Day.
     * @param compute The function which takes the Day and calculates and stores
     *    the value of the requested property.
     */
    private getLocaleValue;
    /**
     * Returns the value of the property If it's not cached, otherwise the value
     * is computed and stored on this Day instance..
     *
     * @param property The property on the Day.
     * @param compute The function which takes the Day and calculates and stores
     *    the value of the requested property.
     */
    private getValue;
    /**
     * Checks to see if the global locale has changed, and if it has it invalides
     * the locale-based properties so next time they're accessed they are cleaned up.
     */
    private checkForUpdate;
    /**
     * Sets the locale for this Day and returns this.
     *
     * @param key The code to the locale to apply.
     */
    setLocale(key: string): this;
    /**
     * Returns the current locale of the day instance.
     */
    getLocale(): Locale;
    /**
     * Sets the locale of this Day instance to the global locale.
     */
    clearLocale(): void;
    /**
     * Resets all locale-based caches on this Day instance.
     */
    resetLocaleCache(): void;
    /**
     * Determines whether this day and the given day lie on the same day.
     */
    sameDay(day: Day): boolean;
    /**
     * Determines whether this day and the given day lie on the same month.
     */
    sameMonth(day: Day): boolean;
    /**
     * Determines whether this day and the given day lie on the same week.
     */
    sameWeek(day: Day): boolean;
    /**
     * Determines whether this week and the given day lie on the same year.
     */
    sameYear(day: Day): boolean;
    /**
     * Determines whether this day and the given day lie on the same month.
     */
    sameQuarter(day: Day): boolean;
    /**
     * Determines whether this week and the given day lie on the same year.
     */
    sameHour(day: Day): boolean;
    /**
     * Determines whether
     */
    sameMinute(day: Day): boolean;
    /**
     *
     */
    sameTime(time: Time): boolean;
    /**
     *
     * @param day
     * @param precision
     */
    compare(day: Day, precision?: Unit): number;
    /**
     *
     */
    isBefore(day: Day, precision?: Unit): boolean;
    /**
     *
     */
    isSameOrBefore(day: Day, precision?: Unit): boolean;
    /**
     *
     */
    isAfter(day: Day, precision?: Unit): boolean;
    /**
     *
     */
    isSameOrAfter(day: Day, precision?: Unit): boolean;
    /**
     *
     * @param day
     * @returns
     */
    max(day: Day): Day;
    /**
     *
     * @param day
     * @returns
     */
    min(day: Day): Day;
    /**
     *
     * @param day
     * @param unit
     * @param op
     * @param absolute
     * @returns
     */
    between(day: Day, unit: Unit, op?: Op, absolute?: boolean): number;
    millisBetween(day: Day, op?: Op, absolute?: boolean): number;
    secondsBetween(day: Day, op?: Op, absolute?: boolean): number;
    minutesBetween(day: Day, op?: Op, absolute?: boolean): number;
    hoursBetween(day: Day, op?: Op, absolute?: boolean): number;
    daysBetween(day: Day, op?: Op, absolute?: boolean): number;
    weeksBetween(day: Day, op?: Op, absolute?: boolean): number;
    monthsBetween(day: Day, op?: Op, absolute?: boolean): number;
    yearsBetween(day: Day, op?: Op, absolute?: boolean): number;
    isBetween(start: Day, end: Day, inclusive?: boolean, precision?: Unit): boolean;
    mutate(mutator: (date: Date) => any): Day;
    add(unit: Unit, amount?: number): Day;
    relative(millis: number): Day;
    prev(days?: number): Day;
    next(days?: number): Day;
    withDayOfMonth(day: number): Day;
    withDay(day: number): Day;
    withDayOfWeek(dayOfWeek: number): Day;
    withDayOfYear(dayOfYear: number): Day;
    withMonth(month: number): Day;
    protected withWeek(week: number, relativeWeek: number): Day;
    withWeekOfYear(week: number): Day;
    withFullWeekOfYear(week: number): Day;
    withWeekspanOfYear(week: number): Day;
    withWeekOfMonth(week: number): Day;
    withWeekspanOfMonth(week: number): Day;
    withFullWeekOfMonth(week: number): Day;
    withYear(year: number): Day;
    withHour(hour: number): Day;
    withTimes(hour?: number, minute?: number, second?: number, millisecond?: number): Day;
    withTime(time: Time): Day;
    asTime(): Time;
    startOf(unit: Unit): Day;
    isStartOf(unit: Unit): boolean;
    endOf(unit: Unit, inclusive?: boolean): Day;
    isEndOf(unit: Unit, inclusive?: boolean): boolean;
    daysInMonth(): number;
    daysInYear(): number;
    weeksInYear(): number;
    format(format: string, cache?: boolean): string;
    utc(keepLocalTime?: boolean): Day;
    toDate(): Date;
    toArray(): number[];
    toJSON(): string;
    toISOString(keepOffset?: boolean): string;
    toObject(): object;
    toString(): string;
    isDST(): boolean;
    isLeapYear(): boolean;
    offset(): number;
    static now(): Day;
    static today(): Day;
    static tomorrow(): Day;
    static fromDate(date: Date): Day | null;
    static unix(millis: number): Day;
    static unixSeconds(seconds: number): Day;
    static parse(input: DayInput): Day;
    static fromString(input: string): Day;
    static fromFormat(input: string, formats: string | string[]): Day;
    static fromObject(input: object): Day;
    static fromArray(input: number[]): Day;
    static fromDayIdentifier(id: number): Day;
    static build(year: number, month: number, date?: number, hour?: number, minute?: number, second?: number, millisecond?: number): Day;
}
