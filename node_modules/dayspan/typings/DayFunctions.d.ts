import { LocaleOptions } from './Locale';
export declare type Unit = 'millis' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';
export declare type UnitRecord<T> = Record<Unit, T>;
export declare type Starter = (x: Date, options?: LocaleOptions) => void;
export declare const startOf: UnitRecord<Starter>;
export declare type Ender = (x: Date, options?: LocaleOptions) => void;
export declare const endOf: UnitRecord<Ender>;
export declare type Adder = (x: Date, amount: number) => void;
export declare const add: UnitRecord<Adder>;
export declare type Differ = (a: Date, b: Date) => number;
export declare const diff: UnitRecord<Differ>;
/**
 * The number of milliseconds for various duration units. These are worse case
 * scenario and do not include DST changes.
 */
export declare const durations: UnitRecord<number>;
export declare function mutate(a: Date, mutator: (a: Date, options?: LocaleOptions) => void, options?: LocaleOptions): Date;
export declare function compare(a: Date, b: Date, precision?: Unit, options?: LocaleOptions): number;
export declare function getLastDayOfMonth(x: Date): number;
export declare function getLastWeekspanOfYear(x: Date): number;
export declare function getWeekOfYearISO(x: Date, options?: LocaleOptions): number;
export declare function getWeekOfYear(x: Date, options?: LocaleOptions): number;
export declare function getWeekspanOfYear(x: Date): number;
export declare function getFullWeekOfYear(x: Date, options?: LocaleOptions): number;
export declare function getWeeksInYear(x: Date, options?: LocaleOptions): number;
export declare function getLastFullWeekOfYear(x: Date, options?: LocaleOptions): number;
export declare function getWeekspanOfMonth(x: Date): number;
export declare function getLastWeekspanOfMonth(x: Date): number;
export declare function getFullWeekOfMonth(x: Date, options?: LocaleOptions): number;
export declare function getLastFullWeekOfMonth(x: Date, options?: LocaleOptions): number;
export declare function getWeekOfMonthISO(x: Date, options?: LocaleOptions): number;
export declare function getWeekOfMonth(x: Date, options?: LocaleOptions): number;
export declare function getWeekISO(start: Date, dayOfStart: number, options?: LocaleOptions): number;
export declare function getWeek(start: Date, dayOfStart: number, options: LocaleOptions): number;
export declare function getFullWeekOf(start: Date, dayOfStart: number, options?: LocaleOptions): number;
export declare function getDayOfWeek(x: Date, options?: LocaleOptions): number;
export declare function getDayOfYear(a: Date): number;
export declare function getDateOffset(x: Date): number;
export declare function isDaylightSavingTime(x: Date): boolean;
export declare function isLeapYear(x: Date): boolean;
export declare function getDaysInYear(x: Date): number;
export declare function getDaysInMonth(x: Date): number;
export declare function getAbsoluteTimestamp(a: Date): number;
export declare function getTimezoneOffsetInMilliseconds(a: Date): number;
export declare function getQuarter(x: Date): number;
export declare function startOfSecond(x: Date): void;
export declare function startOfMinute(x: Date): void;
export declare function startOfHour(x: Date): void;
export declare function startOfDay(x: Date): void;
export declare function startOfWeek(x: Date, options?: LocaleOptions): void;
export declare function startOfMonth(x: Date): void;
export declare function startOfQuarter(x: Date): void;
export declare function startOfYear(x: Date): void;
export declare function endOfSecond(x: Date): void;
export declare function endOfMinute(x: Date): void;
export declare function endOfHour(x: Date): void;
export declare function endOfDay(x: Date): void;
export declare function endOfWeek(x: Date, options?: LocaleOptions): void;
export declare function endOfMonth(x: Date): void;
export declare function endOfQuarter(x: Date): void;
export declare function endOfYear(x: Date): void;
export declare function addMilliseconds(x: Date, amount: number): void;
export declare function addSeconds(x: Date, amount: number): void;
export declare function addMinutes(x: Date, amount: number): void;
export declare function addHours(x: Date, amount: number): void;
export declare function addDays(x: Date, amount: number): void;
export declare function addWeeks(x: Date, amount: number): void;
export declare function addMonths(x: Date, amount: number): void;
export declare function addQuarters(x: Date, amount: number): void;
export declare function addYears(x: Date, amount: number): void;
export declare function diffMilliseconds(a: Date, b: Date): number;
export declare function diffSeconds(a: Date, b: Date): number;
export declare function diffMinutes(a: Date, b: Date): number;
export declare function diffHours(a: Date, b: Date): number;
export declare function diffDays(a: Date, b: Date): number;
export declare function diffWeeks(a: Date, b: Date): number;
export declare function diffMonths(a: Date, b: Date): number;
export declare function diffQuarters(a: Date, b: Date): number;
export declare function diffYears(a: Date, b: Date): number;
