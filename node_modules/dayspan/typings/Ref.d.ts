/**
 * Holds a reference to a value. Multiple things can share the reference, or
 * have their own. The shared value can be changed to a new value making all
 * other references dirty so they know they need to be updated.
 */
export declare class Ref<T> {
    /**
     * If this reference is holding a dirty (out of date) value.
     */
    dirty: boolean;
    /**
     * If the value is shared by multiple things.
     */
    shared: boolean;
    /**
     * The value the reference points to.
     */
    value: T;
    /**
     * Creates a new reference to the given value.
     *
     * @param value The value the reference points to.
     * @param shared If the value is shared by multiple things.
     */
    constructor(value: T, shared: boolean);
    /**
     * Returns a reference to update to the new value.
     *
     * If this reference is shared, a new reference instance will be returned.
     * If this reference is not shared, the value on this instance will be
     * updated and the reference to this instance will be returned.
     *
     * @param newValue The new value for the reference returned.
     */
    getUpdate(newValue: T): Ref<T>;
    /**
     * Returns a reference to update to a new value making this shared
     * reference dirty.
     *
     * If this reference is shared, this reference is marked dirty and a new
     * reference is returned with the new value.
     * If this reference is not shared, the value on this instance will be
     * updated and the reference to this instance will be returned.
     *
     * @param newValue The new value for the reference returned.
     */
    getReplace(newValue: T): Ref<T>;
}
