import { Unit } from './DayFunctions';
/**
 * A class that stores commonly used values.
 */
export declare class Constants {
    /**
     * The number of milliseconds in a second.
     */
    static readonly MILLIS_IN_SECOND: number;
    /**
     * The number of seconds in a minute.
     */
    static readonly SECONDS_IN_MINUTE: number;
    /**
     * The number of minutes in an hour.
     */
    static readonly MINUTES_IN_HOUR = 60;
    /**
     * The number of hours in a day (not including DST days).
     */
    static readonly HOURS_IN_DAY: number;
    /**
     * The number of days in a week.
     */
    static readonly DAYS_IN_WEEK: number;
    /**
     * The maximum possible number of days in a year.
     */
    static readonly DAYS_IN_YEAR: number;
    /**
     * The number of milliseconds in a minute.
     */
    static readonly MILLIS_IN_MINUTE: number;
    /**
     * The number of milliseconds in an hour.
     */
    static readonly MILLIS_IN_HOUR: number;
    /**
     * The number of milliseconds in a day (not including DST days).
     */
    static readonly MILLIS_IN_DAY: number;
    /**
     * The number of milliseconds in a week (not including ones that include DST).
     */
    static readonly MILLIS_IN_WEEK: number;
    /**
     * The number of minutes in a day (not including DST days).
     */
    static readonly MINUTES_IN_DAY: number;
    /**
     * The number of months in a quarter.
     */
    static readonly MONTHS_IN_QUARTER = 3;
    /**
     * The number of months in a year.
     */
    static readonly MONTHS_IN_YEAR: number;
    /**
     * The first month of the year.
     */
    static readonly MONTH_MIN: number;
    /**
     * The last month of the year.
     */
    static readonly MONTH_MAX: number;
    /**
     * The first day of a month.
     */
    static readonly DAY_MIN: number;
    /**
     * The last day of the longest month.
     */
    static readonly DAY_MAX: number;
    /**
     * The first hour of the day.
     */
    static readonly HOUR_MIN: number;
    /**
     * The last hour of the day.
     */
    static readonly HOUR_MAX: number;
    /**
     * The first minute of the hour.
     */
    static readonly MINUTE_MIN: number;
    /**
     * The last minute of the hour.
     */
    static readonly MINUTE_MAX: number;
    /**
     * The first second of the minute.
     */
    static readonly SECOND_MIN: number;
    /**
     * The last second of the minute.
     */
    static readonly SECOND_MAX: number;
    /**
     * The first millisecond of the second.
     */
    static readonly MILLIS_MIN: number;
    /**
     * The last millisecond of the second.
     */
    static readonly MILLIS_MAX: number;
    /**
     * The first day of the week.
     */
    static readonly WEEKDAY_MIN: number;
    /**
     * The last day of the week.
     */
    static readonly WEEKDAY_MAX: number;
    /**
     * The default duration for an event.
     */
    static DURATION_DEFAULT: number;
    /**
     * The default duration unit for an all day event.
     */
    static DURATION_DEFAULT_UNIT_ALL: Unit;
    /**
     * The default duration unit for an event at a given time.
     */
    static DURATION_DEFAULT_UNIT_TIMES: Unit;
    /**
     * Computes the duration unit given its for an all day event.
     *
     * @param all If the event is all day.
     * @return The default unit for the event.
     */
    static DURATION_DEFAULT_UNIT: (all: boolean) => Unit;
    /**
     * The maximum estimated number of events per day. This is used to calculate
     * [[CalendarEvent.id]] to give each event a unique ID. If you think you will
     * have more events than this per day, you can enlarge the value.
     */
    static MAX_EVENTS_PER_DAY: number;
}
